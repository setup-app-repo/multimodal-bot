import { existsSync } from 'fs';
import { join } from 'path';

import { I18n } from '@grammyjs/i18n';
import { Injectable, Logger } from '@nestjs/common';
import { ConfigService } from '@nestjs/config';

import { II18nService, I18nConfig } from './interfaces';

@Injectable()
export class I18nService implements II18nService {
  private readonly logger = new Logger(I18nService.name);
  private readonly i18n: I18n;
  private readonly config: I18nConfig;

  constructor(private readonly configService: ConfigService) {
    const cwd = process.cwd();
    const distLocalesPath = join(cwd, 'dist', 'locales');
    const srcLocalesPath = join(cwd, 'src', 'i18n', 'locales');
    const resolvedLocalesPath = existsSync(distLocalesPath)
      ? distLocalesPath
      : srcLocalesPath;

    this.config = {
      defaultLocale: this.configService.get<string>('FALLBACK_LANGUAGE', 'ru'),
      supportedLocales: ['ru', 'en', 'es', 'de', 'pt', 'fr'],
      localesPath: resolvedLocalesPath,
    };

    this.i18n = new I18n({
      defaultLocale: this.config.defaultLocale,
      useSession: true, // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–µ—Å—Å–∏–∏ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ª–æ–∫–∞–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      directory: this.config.localesPath,
    });

    this.logger.log(
      `I18n initialized with default locale: ${this.config.defaultLocale}`,
    );
    this.logger.log(
      `Supported locales: ${this.config.supportedLocales.join(', ')}`,
    );
    this.logger.log(`Locales directory: ${this.config.localesPath}`);
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥ –ø–æ –∫–ª—é—á—É
   */
  t(key: string, locale?: string, args?: Record<string, any>): string {
    try {
      const targetLocale = this.normalizeLocale(locale);

      // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∫–ª—é—á –∏–∑ dot-notation –≤ kebab-case –¥–ª—è FTL
      const ftlKey = this.convertKeyToFtl(key);

      // üöÄ –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –£–±–∏—Ä–∞–µ–º debug –ª–æ–≥–∏ –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
      // this.logger.debug(`Translating key: ${key} -> ${ftlKey} (locale: ${targetLocale})`);

      // –ò—Å–ø–æ–ª—å–∑—É–µ–º Grammy i18n –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞
      const translation = this.i18n.t(targetLocale, ftlKey, args || {});

      // this.logger.debug(`Translation result: ${translation}`);

      if (!translation || translation === ftlKey) {
        this.logger.warn(
          `Missing translation for key: ${ftlKey} (original: ${key}, locale: ${targetLocale})`,
        );
        // Fallback –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π, –µ—Å–ª–∏ –ø–µ—Ä–µ–≤–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω
        if (targetLocale !== this.config.defaultLocale) {
          const fallbackTranslation = this.i18n.t(
            this.config.defaultLocale,
            ftlKey,
            args || {},
          );
          if (fallbackTranslation && fallbackTranslation !== ftlKey) {
            return fallbackTranslation;
          }
        }
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π –∫–ª—é—á –±–µ–∑ "messages." –ø—Ä–µ—Ñ–∏–∫—Å–∞
        return key.replace('messages.', '');
      }

      return translation;
    } catch (error) {
      // –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏ –¥–ª—è Winston
      if (error instanceof Error) {
        this.logger.error(
          `Error getting translation for key ${key}: ${error.message}`,
          error.stack,
        );
      } else {
        this.logger.error(
          `Error getting translation for key ${key} (unknown error type):`,
          String(error),
        );
      }
      return key.replace('messages.', ''); // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —á–∏—Ç–∞–µ–º—ã–π –∫–ª—é—á
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –ª–æ–∫–∞–ª–∏
   */
  getSupportedLocales(): string[] {
    return [...this.config.supportedLocales];
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –ª–∏ –ª–æ–∫–∞–ª—å
   */
  isLocaleSupported(locale: string): boolean {
    const normalized = locale.toLowerCase().split('-')[0];
    return this.config.supportedLocales.includes(normalized);
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –ª–æ–∫–∞–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
   */
  getDefaultLocale(): string {
    return this.config.defaultLocale;
  }

  /**
   * –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞—Ç—å –ª–æ–∫–∞–ª—å (ru-RU -> ru)
   */
  private normalizeLocale(locale?: string): string {
    if (!locale) {
      return this.config.defaultLocale;
    }

    const normalized = locale.toLowerCase().split('-')[0];
    return this.config.supportedLocales.includes(normalized)
      ? normalized
      : this.config.defaultLocale;
  }

  /**
   * –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–ª—é—á –∏–∑ dot-notation –≤ kebab-case –¥–ª—è FTL
   * –ü—Ä–∏–º–µ—Ä: "messages.welcome.text" -> "welcome-text"
   */
  private convertKeyToFtl(key: string): string {
    // –£–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å "messages." –µ—Å–ª–∏ –µ—Å—Ç—å
    const withoutPrefix = key.startsWith('messages.')
      ? key.replace('messages.', '')
      : key;

    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ kebab-case
    return withoutPrefix.replace(/\./g, '-');
  }
}
